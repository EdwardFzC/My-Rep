R_squared = summary_model$r.squared,
Adj_R_squared = summary_model$adj.r.squared,
F_statistic = summary_model$fstatistic[1],
p_value = pf(summary_model$fstatistic[1],
summary_model$fstatistic[2],
summary_model$fstatistic[3],
lower.tail = FALSE),
std_error = summary_model$sigma
)
}
print(combined_plot_granger)
print(combined_plot_granger_eth)
# para que las graficas con facet_grid aparezcan una sobre la otra de forma horizontal se usa
print(combined_plot_lm)
print(combined_plot_lm_eth)
# Imprimir la tabla de resultados
print(kable(all_results3, format = "markdown"))
# Imprimir la tabla de resultados
print(kable(all_results3_eth, format = "markdown"))
print(granger_test)
# Prueba de causalidad de Granger
granger_test <- grangertest(BTC ~ syp500, order = 1, data = all_lcrends)
print(granger_test)
print(granger_test)
print(combined_plot_granger)
precios <- ggplot(data_close_all)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
precios <- ggplot(data_close_all)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
ecios2 <- ggplotly(precios)
precios <- ggplot(data_close_all)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
#####Graficas precios#####
variables4 <- c("syp500", "BTC", "nasdaq", "ETH")
precios <- ggplot(data_close_all)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
#####Graficas precios#####
variables4 <- c("syp500", "BTC", "nasdaq", "ETH")
precios <- ggplot(data_close_all)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variables4, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
View(btc_syp)
syp4 <- data_close_all$syp500 %>% mutate(Variable = "S&P 500")
syp4 <- data_close_d$syp500 %>% mutate(Variable = "S&P 500")
btc4 <- data_close_d$BTC %>% mutate(Variable = "Bitcoin")
View(data_close_d)
View(data_close_all)
grafica <- data_close_all %>% xts_to_dataframe()
grafica <- grafica[1:5]
View(grafica)
syp4 <- grafica$syp500 %>% mutate(Variable = "S&P 500")
View(btc_syp)
syp4 <- grafica$syp500#mutate(Variable = "S&P 500")
btc4 <- grafica$BTC #%>% mutate(Variable = "Bitcoin")
eth4 <- grafica$ETH #%>% mutate(Variable = "Ethereum")
nasdaq4 <- grafica$nasdaq #%>% mutate(Variable = "NASDAQ 100")
syp4 <- grafica[c(1,2)] %>% as.data.frame()#mutate(Variable = "S&P 500")
View(syp4)
syp4 <- grafica[c(1,2)] %>% as.data.frame() %>% mutate(Variable = "S&P 500")
View(syp4)
syp4 <- grafica[c(1,2)] %>% as.data.frame() %>% mutate(Variable = "S&P 500")
btc4 <- grafica[c(1,4)] %>% as.data.frame() %>%  mutate(Variable = "Bitcoin")
eth4 <- grafica[c(1,5)] %>% as.data.frame() %>% mutate(Variable = "Ethereum")
nasdaq4 <- grafica[c(1,3)] %>% as.data.frame() %>%  mutate(Variable = "NASDAQ 100")
View(syp4)
View(btc4)
View(eth4)
View(nasdaq4)
# Combinar todos los dataframes en uno solo
all_data_close_4 <- bind_rows(syp4, btc4, eth4, nasdaq4)
variables4 <- c("syp500", "BTC", "nasdaq", "ETH")
precios <- ggplot(all_data_close_4)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~Variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
View(all_data_close_4)
# Combinar todos los dataframes en uno solo
all_data_close_4 <- bind_rows(syp4, btc4, eth4, nasdaq4)
View(all_data_close_4)
grafica <- data_close_all %>% xts_to_dataframe()
grafica <- grafica[1:5]
syp4 <- grafica[c(1,2)] %>% as.data.frame() %>% mutate(Variable = "S&P 500")
btc4 <- grafica[c(1,4)] %>% as.data.frame() %>%  mutate(Variable = "Bitcoin")
eth4 <- grafica[c(1,5)] %>% as.data.frame() %>% mutate(Variable = "Ethereum")
nasdaq4 <- grafica[c(1,3)] %>% as.data.frame() %>%  mutate(Variable = "NASDAQ 100")
View(btc_syp)
View(btc_nasdaq)
View(syp4)
View(btc4)
# Combinar todos los dataframes en uno solo
all_data_close_4 <- bind_rows(syp4, btc4, eth4, nasdaq4)
View(all_data_close_4)
all_data_close_5 <- melt(all_data_close_4, id.vars = c("date", "Variable"))
View(all_data_close_5)
all_data_close_5 <- melt(all_data_close_4, id.vars = "date")
all_data_close_5 <- melt(all_data_close_4, id.vars = "date") %>% na.omit()
# Combinar todos los dataframes en uno solo
all_data_close_4 <- merge(syp4, btc4, nasdaq4, eth4, all = F)
# Combinar todos los dataframes en uno solo
all_data_close_4 <- merge(syp4, btc4, nasdaq4, eth4, all = F, by="date")
# Combinar todos los dataframes en uno solo
all_data_close_4 <- merge(as.xts(syp4), as.xts(btc4), as.xts(nasdaq4), as.xts(eth4), all = F)
all_data_close_4 <- xts_to_dataframe(all_data_close_4)
View(all_data_close_4)
View(grafica)
all_data_close_5 <- melt(grafica, id.vars = c("date")) %>% na.omit()
View(all_data_close_5)
precios <- ggplot(all_data_close_5)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_wrap(~variable, scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
View(all_data_granger)
View(btc_syp)
View(btc_syp)
View(all_data_granger)
precios <- ggplot(all_data_close_5)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_grid(variable~., scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
precios <- ggplot(all_data_close_5)+
geom_line(aes(x = date, y = syp500, color = "S&P 500"))+
geom_line(aes(x = date, y = BTC, color = "BTC"))+
geom_line(aes(x = date, y = nasdaq, color = "NASDAQ"))+
geom_line(aes(x = date, y = ETH, color = "ETH"))+
facet_grid(variable~., scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
all_data_close_5 <- melt(grafica, id.vars = c("date")) %>% na.omit()
View(all_data_granger)
precios <- ggplot(all_data_close_5, aes(x=date, y=value))+
geom_line(aes(color = "S&P 500"))+
geom_line(aes(color = "BTC"))+
geom_line(aes(color = "NASDAQ"))+
geom_line(aes(color = "ETH"))+
facet_grid(variable~., scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
precios <- ggplot(all_data_close_5, aes(x=date, y=value))+
geom_line()+
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable~., scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
all_data_close_5 <- all_data_close_5$variable %>% as.character()
all_data_close_5 <- melt(grafica, id.vars = c("date")) %>% na.omit()
all_data_close_5$variable <- all_data_close_5$variable %>% as.character()
precios <- ggplot(all_data_close_5, aes(x=date, y=value))+
geom_line()+
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y")+
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo")+
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))+
precios2 <- ggplotly(precios)
grafica <- data_close_all %>% xts_to_dataframe()
# Seleccionar las primeras 5 columnas (asumiendo que las columnas de interés están dentro de las primeras 5)
grafica <- grafica[, 1:5]
# Convertir otro objeto xts a dataframe (aunque no se usa después en el código proporcionado)
all_data_close_4 <- xts_to_dataframe(all_data_close_4)
grafica <- data_close_all %>% xts_to_dataframe()
# Seleccionar las primeras 5 columnas (asumiendo que las columnas de interés están dentro de las primeras 5)
grafica <- grafica[, 1:5]
View(grafica)
# Reestructurar los datos en formato largo y omitir NA
all_data_close_5 <- melt(grafica, id.vars = "date") %>% na.omit()
# Convertir la variable a carácter
all_data_close_5$variable <- as.character(all_data_close_5$variable)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)
# Mostrar la gráfica
print(precios2)
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
scale_y_continuous(breaks = function(x) pretty(x, n = 5)) +
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
scale_y_continuous(breaks = function(x) pretty(x, n = 3)) +
labs(title = "Precios de Cierre Bitcoin, SyP500 y NASDAQ",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
scale_y_continuous(breaks = function(x) pretty(x, n = 3)) +
labs(title = "Precios de Cierre Bitcoin, S&P 500 y NASDAQ 100",
x = "Fecha",
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
plots <- list()
# Crear un gráfico para cada variable y almacenar en la lista
for (variable in unique(all_data_close_5$variable)) {
data_subset <- subset(all_data_close_5, variable == !!variable)
p <- ggplot(data_subset, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_y_continuous(breaks = function(x) pretty(x, n = 3)) +
labs(title = paste("Precios de Cierre:", variable),
x = "Fecha",
y = "Precio de Cierre") +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
plots[[variable]] <- ggplotly(p)
}
plots <- list()
# Crear un gráfico para cada variable y almacenar en la lista
for (variable in unique(all_data_close_5$variable)) {
data_subset <- all_data_close_5[all_data_close_5$variable == variable, ]
p <- ggplot(data_subset, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_y_continuous(breaks = function(x) pretty(x, n = 3)) +
labs(title = paste("Precios de Cierre:", variable),
x = "Fecha",
y = "Precio de Cierre") +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
plots[[variable]] <- ggplotly(p)
}
# Combinar los gráficos en un solo objeto plotly con subplot y sincronizar la posición del mouse
precios2 <- subplot(plots, nrows = length(plots), shareX = TRUE, shareY = FALSE) %>%
layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))            # Posición vertical (por debajo de la gráfica)
# Mostrar la gráfica
precios2
print(combined_plot_granger)
print(combined_plot_granger_eth)
eth_w_fgi <- merge(as.xts(eth_close),as.xts(btc_close), all = F)
View(eth_w_btc)
## CON ETH
# syp500
eth_syp <- calcular_granger_temporal(all_lcrends2, "syp500", "ETH", ventana = 30)
## CON ETH
# syp500
eth_syp <- calcular_granger_temporal(all_lcrends2, "syp500", "ETH", ventana = 30)
# btc
eth_btc <- calcular_granger_temporal(eth_w_lbtc, "BTC", "ETH", ventana = 30)
#dominancia btc
eth_dom <- calcular_granger_temporal(eth_w_ldom, "btc_dom", "ETH", ventana = 30)
#fear greed index
eth_fgi <- calcular_granger_temporal(eth_w_lfgi, "fg_index", "ETH", ventana = 30)
#market cap
eth_mcap <- calcular_granger_temporal(eth_w_lmcap, "market_cap", "ETH", ventana = 30)
eth_syp <- eth_syp %>% mutate(Variable = "S&P 500")
eth_syp <- eth_syp %>% mutate(Variable = "S&P 500")
all_data_granger_eth <- bind_rows(eth_syp, eth_btc, eth_dom, eth_fgi, eth_mcap)
combined_plot_granger_eth <- ggplot(all_data_granger_eth, aes(x = date, y = p_value)) +
geom_point(aes(color = p_value < 0.05)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
scale_color_manual(values = c("TRUE" = "#CDAD00", "FALSE" = "#528B8B")) +
facet_grid(. ~ Variable , scales = "free_x") +
labs(title = "Causalidad de Granger entre Ethereum y Variables Independientes",
subtitle = "Ventana Movil = 30",
x = NULL,
y = "Valor p",
color = "Influencia Potencial -> (p < 0.05)") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(combined_plot_granger_eth)
View(all_data_granger_eth)
View(eth_syp)
eth_syp <- calcular_granger_temporal(all_lcrends2, "syp500", "ETH", ventana = 30)
# btc
eth_btc <- calcular_granger_temporal(eth_w_lbtc, "BTC", "ETH", ventana = 30)
#dominancia btc
eth_dom <- calcular_granger_temporal(eth_w_ldom, "btc_dom", "ETH", ventana = 30)
#fear greed index
eth_fgi <- calcular_granger_temporal(eth_w_lfgi, "fg_index", "ETH", ventana = 30)
#market cap
eth_mcap <- calcular_granger_temporal(eth_w_lmcap, "market_cap", "ETH", ventana = 30)
eth_syp <- eth_syp %>% mutate(Variable = "S&P 500")
eth_btc <- eth_btc %>% mutate(Variable = "BTC")
eth_dom <- eth_dom %>% mutate(Variable = "BTC Dominance")
eth_fgi <- eth_fgi %>% mutate(Variable = "Fear & Greed Index")
eth_mcap <- eth_mcap %>% mutate(Variable = "Market Cap")
all_data_granger_eth <- bind_rows(eth_syp, eth_btc, eth_dom, eth_fgi, eth_mcap)
View(all_data_granger_eth)
combined_plot_granger_eth <- ggplot(all_data_granger_eth, aes(x = date, y = p_value)) +
geom_point(aes(color = p_value < 0.05)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
scale_color_manual(values = c("TRUE" = "#CDAD00", "FALSE" = "#528B8B")) +
facet_grid(. ~ Variable , scales = "free_x") +
labs(title = "Causalidad de Granger entre Ethereum y Variables Independientes",
subtitle = "Ventana Movil = 30",
x = NULL,
y = "Valor p",
color = "Influencia Potencial -> (p < 0.05)") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(combined_plot_granger_eth)
print(combined_plot_granger)
# Mostrar la gráfica
print(precios2)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
scale_y_continuous(breaks = function(x) pretty(x, n = 3)) +
labs(title = "Precios de Cierre Bitcoin, S&P 500 y NASDAQ 100",
x = NULL,
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
# Crear la gráfica con ggplot2
precios <- ggplot(all_data_close_5, aes(x = date, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = c("syp500" = "#CDAD00", "nasdaq" = "#528B8B", "BTC" = "#EE6AA7", "ETH" = "#9A32CD")) +
facet_grid(variable ~ ., scales = "free_y") +
# para poner escala logaritmica se usa scale_y_log10()
scale_y_log10(breaks = function(x) pretty(x, n = 3)) +
labs(title = "Precios de Cierre Bitcoin, S&P 500 y NASDAQ 100",
x = NULL,
y = "Precio de Cierre",
color = "Activo") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Convertir la gráfica a un objeto plotly para interactividad
precios2 <- ggplotly(precios)%>% layout(legend = list(orientation = "h",   # Orientación horizontal
x = 0.5,              # Centrado horizontalmente
xanchor = "center",   # Alineación horizontal
y = -0.2))
# Mostrar la gráfica
print(precios2)
View(eth_w_lbtc)
# para que las graficas con facet_grid aparezcan una sobre la otra de forma horizontal se usa
print(combined_plot_lm)
# Imprimir la tabla de resultados
print(kable(all_results3, format = "markdown"))
e
# Imprimir la tabla de resultados
print(kable(all_results3_eth, format = "markdown"))
print(combined_plot_lm_eth)
combined_plot_granger <- ggplot(na.omit(all_data_granger, aes(x = date, y = p_valu)e)) +
combined_plot_granger <- ggplot(na.omit(all_data_granger), aes(x = date, y = p_valu)e)) +
combined_plot_granger <- ggplot(na.omit(all_data_granger), aes(x = date, y = p_value)) +
geom_point(aes(color = p_value < 0.05)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
scale_color_manual(values = c("TRUE" = "#CDAD00", "FALSE" = "#528B8B")) +
facet_grid(. ~ Variable , scales = "free_x") +
labs(title = "Causalidad de Granger entre Bitcoin y Variables Independientes",
subtitle = "Ventana Movil = 30",
x = NULL,
y = "Valor p",
color = "Influencia Potencial -> (p < 0.05)") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
combined_plot_granger_eth <- ggplot(na.omit(all_data_granger_eth), aes(x = date, y = p_value)) +
geom_point(aes(color = p_value < 0.05)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
scale_color_manual(values = c("TRUE" = "#CDAD00", "FALSE" = "#528B8B")) +
facet_grid(. ~ Variable , scales = "free_x") +
labs(title = "Causalidad de Granger entre Ethereum y Variables Independientes",
subtitle = "Ventana Movil = 30",
x = NULL,
y = "Valor p",
color = "Influencia Potencial -> (p < 0.05)") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(kable(all_results3, format = "markdown"))
knit_with_parameters("~/1Weas/Github/My-Rep/Cry/40 criptos ¿tesis/Proyecto-final.Rmd")
install.packages("latexpdf")
install.packages("TinyTeX")
library(tinytex)
library(latexpdf)
tinytex::install_tinytex()
