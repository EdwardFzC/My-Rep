) +
scale_fill_manual(values = setNames(presidents$FillColor, presidents$President), guide = "none") +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
# Etiquetas y tema
labs(
title = "Gold Price vs Dollar Index (2000-2024)",
subtitle = "Comparison across U.S. Presidential Terms",
x = "Year",
caption = "Data source: Yahoo Finance"
) +
theme_fivethirtyeight() +
theme(
legend.position = "bottom",
legend.justification = "center",
plot.title = element_text(face = "bold", size = 20, color = "#333333"),
plot.subtitle = element_text(size = 14, color = "#666666"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#FFFFFF")
) +
annotate("text", x = as.Date("2004-06-01"), y = max(data$Gold),
label = "Bush", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2012-06-01"), y = max(data$Gold),
label = "Obama", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2018-06-01"), y = max(data$Gold),
label = "Trump", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2022-01-01"), y = max(data$Gold),
label = "Biden", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
geom_text(data = presidents, aes(x = Start + (End - Start)/2, y = Inf,
label = sprintf("DXY: %.1f%%\nGold: %.1f%%",
DXY_Change, Gold_Change)),
vjust = 1, size = 2.5, fontface = "bold")
# Crear la gráfica
ggplot() +
# Áreas de fondo para los presidentes
geom_rect(data = presidents, aes(xmin = Start, xmax = End, ymin = -Inf, ymax = Inf, fill = President), alpha = 0.5, show.legend = FALSE) +
# Líneas de datos
geom_line(data = data, aes(x = index(data), y = Gold, color = "Gold Price"), linewidth = 0.8) +
geom_line(data = data, aes(x = index(data), y = DXY * scale_factor, color = "Dollar Index"), linewidth = 0.8) +
# Escalas del eje Y
scale_y_continuous(
name = "Price of Gold (USD)",
sec.axis = sec_axis(~ . / scale_factor, name = "Dollar Index (DXY)"),
labels = dollar_format(prefix = "$")
) +
# Definir colores y etiquetas de la leyenda
scale_color_manual(
values = c("Gold Price" = "#B03060", "Dollar Index" = "#4682B4"),
name = "Indicators"
) +
scale_fill_manual(values = setNames(presidents$FillColor, presidents$President), guide = "none") +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
# Etiquetas y tema
labs(
title = "Gold Price vs Dollar Index (2000-2024)",
subtitle = "Comparison across U.S. Presidential Terms",
x = "Year",
caption = "Data source: Yahoo Finance | Author: @eduardofzc",
) +
theme_fivethirtyeight() +
theme(
legend.position = "bottom",
legend.justification = "center",
plot.title = element_text(face = "bold", size = 20, color = "#333333"),
plot.subtitle = element_text(size = 14, color = "#666666"),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#FFFFFF")
) +
annotate("text", x = as.Date("2004-06-01"), y = max(data$Gold),
label = "Bush", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2012-06-01"), y = max(data$Gold),
label = "Obama", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2018-06-01"), y = max(data$Gold),
label = "Trump", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
annotate("text", x = as.Date("2022-01-01"), y = max(data$Gold),
label = "Biden", hjust = 0, vjust = 1, size = 5, color = "darkslategray", fontface = "bold")+
geom_text(data = presidents, aes(x = Start + (End - Start)/2, y = Inf,
label = sprintf("DXY: %.1f%%\nGold: %.1f%%",
DXY_Change, Gold_Change)),
vjust = 1, size = 2.5, fontface = "bold")
install.packages("rvest")
install.packages("httr2")
library(httr2)
library(rvest)
library(tidyverse)
screeners = {
"all_index": "markets/indices/quotes-all/",
screeners <- list(
all_index = "markets/indices/quotes-all/",
major_index = "markets/indices/quotes-major/",
us_index = "markets/indices/quotes-us/",
snp_index = "markets/indices/quotes-snp/",
currency_index = "markets/indices/quotes-currency/",
all_stocks_US = "markets/stocks-usa/market-movers-all-stocks/"
)
View(screeners)
# Selección del screener
screener_selected = "all_stocks_US"
base_url = "https://en.tradingview.com/"
url = base_url + screeners[screener_selected]
url = base_url + screeners[slect(contains(names(screeners), screener_selected))]
# sumar la base_url con screener_selected
url = paste0(base_url, screeners[[screener_selected]])
# Realizar la petición con rvest
response <- GET(url)
# Realizar la petición con rvest
response <- get(url)
# Realizar la petición con rvest
response <- get(url)
if (respoe == 200) {
print("Petición exitosa")
} else {
print("Error en la petición")
}
if (response == 200) {
print("Petición exitosa")
} else {
print("Error en la petición")
}
?rvest
# Realizar la petición con rvest
response <- read_html(url)
View(response)
response %>%
html_element(".tracklist") %>%
html_table()
# Extraer la tabla
table <- response %>% html_node("table") %>% html_table()
View(table)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(.$Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(.$Symbol, ~html_node(read_html(.x), "sup") %>% html_text())
) %>%
select(-Symbol)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr($Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(.$Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(.$Symbol, ~html_node(read_html(.x), "sup") %>% html_text())
) %>%
select(-Symbol)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(.$Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(.$Symbol, ~html_node(read_html(.x), "span") %>% html_text())
) %>%
select(-Symbol)
table %>% as.data.frame()
View(table)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(Symbol, ~html_node(read_html(.x), "sup") %>% html_text())
) %>%
select(-Symbol)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(Symbol, ~html_node(read_html(.x), "sup") %>% html_text())
) %>%
select(-Symbol)
# Separar la columna Symbol en ticker y nombre, el primero se encuentra en tipo "a" y el segundo en tipo "sup"
table <- table %>%
mutate(
ticker = map_chr(Symbol, ~html_node(read_html(.x), "a") %>% html_text()),
name = map_chr(Symbol, ~html_node(read_html(.x), "sup") %>% html_text())
)
get_response_data <- function(url) {
page <- read_html(url)
table <- page %>%
html_node("table") %>%
html_table()
if (is.null(table)) {
stop("No se encontró la tabla en la página")
}
# Extraer ticker y nombre
symbols <- page %>%
html_nodes("table tr td:first-child")
tickers <- symbols %>%
html_nodes("a") %>%
html_text()
names <- symbols %>%
html_nodes("sup") %>%
html_text()
# Combinar los datos
result <- table %>%
select(-1) %>%  # Eliminar la primera columna (Symbol)
mutate(Ticker = tickers, Nombre = names) %>%
select(Ticker, Nombre, everything())
return(result)
}
get_response_data(url)
get_response_data <- function(url) {
page <- read_html(url)
table <- page %>%
html_node("table") %>%
html_table()
if (is.null(table)) {
stop("No se encontró la tabla en la página")
}
# Extraer ticker y nombre
symbols <- page %>%
html_nodes("table tr td:first-child")
tickers <- symbols %>%
html_nodes("a") %>%
html_text()
names <- symbols %>%
html_nodes("sup") %>%
html_text()
# Combinar los datos
result <- table %>%
select(-1) %>%  # Eliminar la primera columna (Symbol)
mutate(Ticker = tickers, Nombre = names) %>%
select(Ticker, Nombre, everything())
as.data.frame(result)
return(result)
}
get_response_data(url)
t2 <- get_response_data(url)
View(t2)
# funcion de busqueda de datos de ticker o nombre especifico
get_data <- function(ticker = NULL, nombre = NULL) {
if (is.null(ticker) && is.null(nombre)) {
stop("Debe especificar al menos un ticker o nombre")
}
if (!is.null(ticker)) {
t2 <- t2 %>%
filter(Ticker == ticker)
}
if (!is.null(nombre)) {
t2 <- t2 %>%
filter(Nombre == nombre)
}
return(t2)
}
get_data(ticker = "AAPL")
# Funcion de busqueda
get_response_data <- function(url) {
page <- read_html(url)
table <- page %>%
html_node("table") %>%
html_table()
if (is.null(table)) {
stop("No se encontró la tabla en la página")
}
# Extraer ticker y nombre
symbols <- page %>%
html_nodes("table tr td:first-child")
tickers <- symbols %>%
html_nodes("a") %>%
html_text()
names <- symbols %>%
html_nodes("sup") %>%
html_text()
# Combinar los datos
result <- table %>%
select(-1) %>%  # Eliminar la primera columna (Symbol)
mutate(Ticker = tickers, Name = names) %>%
select(Ticker, Name, everything())
as.data.frame(result)
return(result)
}
t2 <- get_response_data(url)
View(t2)
# funcion de busqueda de datos de ticker o nombre especifico
get_data <- function(data_table ,ticker = NULL, nombre = NULL) {
if (is.null(ticker) && is.null(nombre)) {
stop("Debe especificar al menos un ticker o nombre")
}
if (!is.null(ticker)) {
data_asset <- data_table %>%
filter(Ticker == ticker)
}
if (!is.null(nombre)) {
data_asset <- data_table %>%
filter(Nombre == nombre)
}
return(data_asset)
}
get_data( t2,ticker = "AAPL")
get_data( t2,ticker = "A")
head(t2)
library(readr)
library(plotly)
library(xts)
library(reshape2)
library(gtools)
library(quantmod)
library(lmtest)
library(vars)
library(stats)
library(tseries)
library(purrr)
library(broom)
library(ggpubr)
library(knitr)
library(tidyverse)
# eliminar notacion cientifica
options(scipen=999)
data_raw <- read_csv("1Weas/Github/My-Rep/Cry/40 criptos ¿tesis/crypto.csv/crypto.csv")
setwd("~/1Weas/Github/My-Rep/Cry/40 criptos analisis")
# Lectura de datos
data_raw <- read_csv("crypto.csv/crypto.csv")
View(data_raw)
Filtrar los datos entre 31 de diciembre de 2020 a las 23:00 y la fecha más reciente
# Filtrar los datos entre 31 de diciembre de 2020 a las 23:00 y la fecha más reciente
data_raw$date <- as.POSIXct(data_raw$date, format="%d/%m/%Y %H:%M") # cosa rara se establece formato al revés
start_date <- "2020-12-31 23:00:00" # Fecha filtro
end_date <- "2024-02-20 02:00:00" # Fecha final
data <- filter(data_raw, date>= start_date)
# Comprobar de formato fecha
#year(data$date[1])
#month(data$date[1])
#day(data$date[1])
# Función renombrar columnas eliminando el sufijo "USDT_close u otros" y crear variable con nombres de activos
get_assets <- function(data, suffix = "NA") {
column_names <- colnames(data_close_h)
assets <- gsub(suffix, "", column_names)
return(assets)
}
####### FUNCIONES RENDS #########
# FUNCIÓN PARA CALCULAR RENDIMIENTOS
# Función para calcular rendimientos logarítmicos
calc_log_returns <- function(data) {
if (colnames(data)[1] == "date") {
log_returns <- data.frame(date= data$date[-1], lapply(data[,-1], function(x) diff(log(x))))
} else {
log_returns <- data.frame(lapply(data, function(x) diff(log(x))))
log_returns <- log_returns[-1,] %>% as.xts()
}
return(log_returns)
}
# funcion para rendimientos en cambio porcentual
calc_pct_returns <- function(data) {
if (colnames(data)[1] == "date") {
pct_returns <- data.frame(date= data$date[-1], lapply(data[,-1], function(x) diff(x)/x[-length(x)]))
} else {
pct_returns <- data.frame(lapply(data, function(x) diff(x)/x[-length(x)]))
pct_returns <- pct_returns[-1,] %>% as.xts()
}
return(pct_returns)
}
# Función para calcular rendimientos acumulados
calc_acum_returns <- function(data) {
if (colnames(data)[1] == "date") {
acum_rends <- data.frame(date= data$date, lapply(data[,-1], function(x) cumsum(x)))
} else {
acum_rends <- data.frame(lapply(data, function(x) cumsum(x))) %>% as.xts()
}
return(acum_rends)
}
# funcion xts a dataframe
xts_to_dataframe <- function(data) {
data <- as.data.frame(data) %>% rownames_to_column(var="date")
data$date <- as.Date(data$date, format = "%Y-%m-%d")
return(data)
}
data_vol_h <- data %>% select(date, contains("volume"))
data_close_h <- data %>% select(date, contains("close"))
data_log_h <- calc_log_returns(data_close_h)
View(data_log_h)
# Obtener el nombre de los activos usados
assets <- get_assets(data_close_h, "USDT_close")
colnames(data_log_h) <- get_assets(data_close_h, "USDT_close")
# Función para calcular el test de Granger a lo largo del tiempo
calcular_granger_temporal <- function(data, var_causa, var_efecto, ventana = 30) {
n <- nrow(data)
resultados <- data.frame(
fecha = seq_len(n),
p_value = rep(NA, n)
)
for (i in ventana:n) {
subset_data <- data[(i - ventana + 1):i, ]
tryCatch({
test <- grangertest(formula(paste(var_efecto, "~", var_causa)),
order = 1,
data = subset_data)
resultados$p_value[i] <- test$`Pr(>F)`[2]
}, error = function(e) {
message("Error en el cálculo de Granger para el punto ", i, ": ", e$message)
})
}
resultados$date <- data$date %>% as.Date()
return(resultados)
}
granger_test_temporal_graficas <- function(data, var_causa, var_efecto, ventana = 30) {
resultados <- calcular_granger_temporal(data, var_causa, var_efecto, ventana = 30)
plot <- ggplot(na.omit(resultados), aes(x = date, y = p_value)) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
geom_point(aes(color = p_value < 0.05)) +
scale_color_manual(values = c("TRUE" = "#CDAD00", "FALSE" = "#528B8B")) +
labs(title = sprintf("Causalidad de Granger: %s -> %s", var_causa, var_efecto),
subtitle = sprintf("Ventana Movil = %d", ventana),
x = NULL,
y = "Valor p",
color = "Influencia Potencial -> (p < 0.05)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#plot2 <- ggplotly(plot) %>%
#layout(legend = list(orientation = "h",  # orientación horizontal
#  x = 0.5,  # centra la leyenda horizontalmente
#  xanchor = "center",  # ancla la leyenda en el centro horizontal
#  y = -0.2))  # coloca la leyenda debajo del gráfico
return(plot)
}
granger_test_temporal_graficas(data_log_h, "BTC", "ETH", ventana = 24)
# Función para calcular el índice de impacto
calcular_indice_impacto <- function(data, var_causa, var_efecto, ventana = 30) {
n <- nrow(data)
resultados <- data.frame(
fecha = seq_len(n),
indice_impacto = rep(NA, n)
)
for (i in ventana:n) {
subset_data <- data[(i - ventana + 1):i, ]
tryCatch({
# Test de Granger de SP500 -> BTC
test_sp500_btc <- grangertest(formula(paste(var_efecto, "~", var_causa)),
order = 1,
data = subset_data)
p_value_sp500_btc <- test_sp500_btc$`Pr(>F)`[2]
# Test de Granger de BTC -> SP500
test_btc_sp500 <- grangertest(formula(paste(var_causa, "~", var_efecto)),
order = 1,
data = subset_data)
p_value_btc_sp500 <- test_btc_sp500$`Pr(>F)`[2]
# Calcular el índice de impacto
if (p_value_sp500_btc < p_value_btc_sp500) {
# SP500 impacta más a BTC
indice <- -log10(p_value_sp500_btc)
} else {
# BTC impacta más a SP500 o no hay diferencia significativa
indice <- log10(p_value_btc_sp500)
}
resultados$indice_impacto[i] <- indice
}, error = function(e) {
message("Error en el cálculo para el punto ", i, ": ", e$message)
})
}
return(resultados)
}
# Función para calcular el índice de impacto
calcular_indice_impacto <- function(data, var_causa, var_efecto, ventana = 30) {
n <- nrow(data)
resultados <- data.frame(
fecha = seq_len(n),
indice_impacto = rep(NA, n)
)
for (i in ventana:n) {
subset_data <- data[(i - ventana + 1):i, ]
tryCatch({
# Test de Granger de SP500 -> BTC
test_sp500_btc <- grangertest(formula(paste(var_efecto, "~", var_causa)),
order = 1,
data = subset_data)
p_value_sp500_btc <- test_sp500_btc$`Pr(>F)`[2]
# Test de Granger de BTC -> SP500
test_btc_sp500 <- grangertest(formula(paste(var_causa, "~", var_efecto)),
order = 1,
data = subset_data)
p_value_btc_sp500 <- test_btc_sp500$`Pr(>F)`[2]
# Calcular el índice de impacto
if (p_value_sp500_btc < p_value_btc_sp500) {
# SP500 impacta más a BTC
indice <- -log10(p_value_sp500_btc)
} else {
# BTC impacta más a SP500 o no hay diferencia significativa
indice <- log10(p_value_btc_sp500)
}
resultados$indice_impacto[i] <- indice
}, error = function(e) {
message("Error en el cálculo para el punto ", i, ": ", e$message)
})
}
return(resultados)
}
resultados <- calcular_indice_impacto(data_close_h, "BTC", "ETH", ventana = 24)
resultados <- calcular_indice_impacto(data_log_h, "BTC", "ETH", ventana = 24)
resultados$date <- all_lcrends2$Date %>% as.Date()
View(resultados)
resultados$date <- data_log_h$Date %>% as.Date()
resultados$fecha <- data_log_h$Date %>% as.Date()
resultados$date <- data_log_h$Date
resultados$date <- data_log_h$Date
resultados$fecha <- data_log_h$Date
resultados$date <- data_log_h$date
# Crear el gráfico
ggplot(resultados, aes(x = date, y = indice_impacto)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Índice de Impacto: BTC sobre ETH",
subtitle = "Ventana Movil = 24h",
x = "Tiempo",
y = "Índice de Impacto",
caption = "Valores positivos: BTC impacta más a ETH\nValores negativos: ETH impacta más a BTC") +
theme_minimal()
